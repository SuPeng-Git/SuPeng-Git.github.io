<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Main</title>
  
  <subtitle>悟已往之不谏，知来者之可追!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-16T16:13:06.940Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SuPeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++语法</title>
    <link href="http://example.com/2022/01/17/C++/C++%E7%B2%BE%E7%AE%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/01/17/C++/C++%E7%B2%BE%E7%AE%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-01-16T16:05:55.387Z</published>
    <updated>2022-01-16T16:13:06.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用变量：-amp"><a href="#引用变量：-amp" class="headerlink" title="引用变量：&amp;"></a>引用变量：&amp;</h1><p><strong>创建引用声明：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ElementType &amp; name = variate;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：必须在声明引用变量时进行初始化。</strong></p></blockquote><p><strong>将引用用作函数参数——按引用传递</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值函数名(ElementType &amp; name,ElementType &amp; name)&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>临时变量 、引用参数和const</strong></p><blockquote><p>如果引用参数是const，则编译器将在下面两种情况下生成<strong>临时变量</strong>：</p><ol><li>实参的类型正确，但不是左值</li><li>实参的类型不正确，但可以转换为正确的类型</li></ol><p>注意：如果函数调用的参数不是左值或与之对应的const引用参数的类型不匹配，则C++将创建类型正确的匿名变量，<br>将函数调用的参数的值传递给匿名变量，并让参数来引用该变量。</p><p><strong>尽可能使用const</strong></p><ol><li>使用const可以避免无意中修改数据的变长错误；</li><li>使用const使函数能够处理const和非const实参，否则将只能接受非const数据；</li><li>使用const引用使函数能够正确生成并使用临时变量。</li></ol></blockquote><p><strong>返回引用</strong></p><blockquote><p>返回引用的函数实际上是被引用的变量的别名。<br>返回引用应避免返回函数终止时不再存在的内存单元引用。<br>为避免这种问题，可以考虑返回一个作为参数传递给函数的引用。作为参数的引用将指向调用函数使用的数据，因此返回的引用也指向这些数据。<br>另一种方法是用new类分配新的存储空间。但在不再需要new分配内存时，用使用delete来释放它们。<br>返回const引用—即不可修改的左值</p></blockquote><p><strong>何时使用引用参数</strong></p><blockquote><p>使用引用参数的主要原因：<br>程序员能够修改调用的函数中的数据对象<br>通过传递引用而不是整个数据对象，可以提高程序的运行速度。</p></blockquote><p>对于使用传递的值而不做修改的函数：</p><ul><li>如果数据对象很小，若内置数据类型或小型结构，则按值传递</li><li>如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指针声明为指向const的指针。</li><li>如果数据对象是较大的结构，则使用const指针或const引用，以提高程序的效率。这样可以节省赋值结构所需的时间和空间。</li><li>如果数据对象是类对象，则使用const引用。类设计的语义常常要求使用引用，这是C++新增这项特性的主要原因。因此，传递类对象参数的标准方式是按引用传递。</li></ul><p>对于修改调用函数中数据的函数:</p><ul><li>如果数据对象是内置数据类型，则使用指针。</li><li>如果数据对象是数组，则只能使用指针。</li><li>如果数据对象是结构，则使用引用或指针。</li><li>如果数据对象是类对象，则使用引用。</li></ul><h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p><strong>默认参数</strong>：指的是当函数调用中省略了实参时自动使用的一个值。</p><p><strong>默认参数的设置</strong></p><p>将默认值赋给原型中的参数。只有原型包含默认值的信息,函数定义无需修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[返回值类型] [函数名](ElementType _val = [默认值]);</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>在函数调用中，实参按从左往右的顺序依次被赋给形参，而不能跳过任何参数。</li><li>如果某个位置有了默认参数，那么从这个位置往后都要有默认值。即只能在参数列表中从右到左提供默认参数。因此，如果为某个参数提供了默认值，则必须为该参数右边所有的参数提供默认值。</li></ul></blockquote><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>函数多态是C++在C语言基础上新增的功能。默认参数允许使用不同数目的参数调用同一个函数，而函数多态（函数重载）允许使用多个同名的函数。</p><p>术语“多态”指的是有多种形式，因此函数多态允许函数可以有多种形式。术语“函数重载”指的是可以有多个同名的函数，第名称进行了重载。</p><p>函数重载的关键是函数的参数列表——也称为函数的==特征标==。如果两个函数的参数数目和类型相同，同时参数的排列顺序也相同，则它们的特征标相同，而变量名是无关紧要的。C++允许定义名称相同的函数，条件是它们的特征标不同。</p><p>注意：类型引用和类型本身视为同一特征标。</p><p><strong>何时使用函数重载</strong>：仅当函数基本上执行相同的任务，但使用不同形式的数据时使用函数重载。</p><blockquote><p>拓展：名称修饰</p><p>C++编译器执行一些神奇的操作——名称修饰或名名称矫正，它根据函数原型中指定的形参类型对每个函数进行加密。</p></blockquote><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><p><strong>函数模板</strong>：函数模板是通用的函数描述，也就是说，它们使用泛型来定义函数，其中的泛型可用具体的的类型替换。通过将类型作为参数传递给模板，可使编译器生成该类型的函数。</p><p><strong>建立函数模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> AnyType&gt;</span><br><span class="line">[返回值类型] [函数名](AnyType a, AnyType b)&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行指出，要建立一个函数模板，并将类型命名为AnyType。类型名可以自定义，但要遵守C++命名规范。关键字template和typename是必需的。在标准C++98添加关键字typename之前，C++使用关键字class来创建模板。</p><p><strong>提示</strong>：如果需要多个将同一种算法用于不同类型的函数，则使用模板。如果不考虑向后兼容的问题，并愿意键入较长的单词，则声明类型参数时，应使用typename而不使用class。</p><p><strong>函数模板重载</strong></p><p>和常规函数重载相同，被重载的模板的函数特征标必须不同。</p><p><strong>模板的局限性</strong></p><p>编写的模板函数很可能无法处理某些类型。</p><p><strong>显示具体化</strong></p><p>当编译器找到与函数调用匹配的具体化定义时，将使用该定义，而不再寻找模板。</p><ul><li>第三代具体化（ISO/ANSI C++标准）</li></ul><p>对于给定的函数名，可以有非模板函数、模板函数和显示具体化模板函数以及它们的重载版本。<br>显示具体化的原型和定义应以template&lt;&gt;打头，并通过名称来指出类型。<br>具体化优先于常规模板，而非模板函数优先于具体化和常规化模板。</p><p><strong>实例化和具体化</strong></p><ul><li>==模板实例==：编译器使用模板为特定类型生成函数定义时，得到的是模板实例。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Add</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.2</span>;</span><br><span class="line">cout &lt;&lt; Add&lt;<span class="keyword">double</span>&gt;(x, x);  <span class="comment">//显示示例</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">Add</span>(m , m); <span class="comment">//隐式实例化</span></span><br></pre></td></tr></table></figure><ul><li>==具体化（specialization）==：隐式实例化、显示实例化和显示实例化统称具体化。它们的相同之处在于，它们表示的都是使用具体类型的函数定义，而不是通用描述。</li></ul><blockquote><p>引用显示实例化后，必须使用新的语法——在声明中使用前缀template和template&lt;&gt;，以区分显示实例化和具体实例化。</p><p>警告：试图在同一文件（或转换单元）中使用同一种类型的显示实例化和显式具体化将出错。</p></blockquote><p><strong>编译器选择使用哪个函数版本</strong></p><ul><li>==重载解析==：C++通过已确立的策略来决定为函数调用使用哪一个函数定义的过程称为重载解析。<blockquote><ol><li>第一步：创建候选函数列表。其中包含与被调用函数的名称相同的函数和模板函数。</li><li>第二部：使用候选函数列表创建可行函数。这些都是参数数目正确的函数，为此有一个隐式转换序列，其中包含实参类型与相应的形参类型完全的情况。</li><li>第三步：确定是否有最佳的可行函数。如果有，则使用它，否则该函数调用出错。</li></ol></blockquote></li></ul><ol><li>完全匹配和最佳匹配</li></ol><div class="table-container"><table><thead><tr><th>从实参</th><th>到形参</th></tr></thead><tbody><tr><td>Type</td><td>Type &amp;</td></tr><tr><td>Type &amp;</td><td>Type</td></tr><tr><td>Type []</td><td>*Type</td></tr><tr><td>Type (argument)</td><td>Type * (argument)</td></tr><tr><td>Type</td><td>const Type</td></tr><tr><td>Type</td><td>volatile Type</td></tr><tr><td>Type*</td><td>const Type</td></tr><tr><td>Type*</td><td>volatile Type*</td></tr></tbody></table></div><p>如果有多个匹配的原型，则编译器将无法完成重载解析过程；如果没有最佳的可行函数，则编译器将生成一条错误消息，该消息可能会使用诸如“ambiguous（二义性）”这样的词语。然而，有时候，即使两个函数都完全匹配，仍可完成重载解析。==首先，指向非const数据的指针和引用优先与非const指针和引用参数匹配。const和非const之间的区别只适用于指针和引用指向的数据。==</p><p>一个完全匹配优于另一个的另一种情况是，其中一个时非模板函数，而另一个不是。在这种情况下，非模板函数优先于模板函数（包括显式具体化）。具体化优先于常规模板，而非模板函数优先于具体化和常规化模板。</p><p>如果两个完全匹配的函数都是模板函数，则较具体的模板函数优先。例如，这意味着显式具体化将优于使用模板隐式生成的具体化。</p><p>术语“最具体（most specialized）”并不一定意味着显式具体化，而是指编译器推断使用哪种类型时执行的转换最少。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">void</span> <span class="title">recycle</span> <span class="params">(Type t)</span></span>; <span class="comment">// #1</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span> <span class="function"><span class="keyword">void</span> <span class="title">recycle</span> <span class="params">(Type * t)</span></span>; <span class="comment">// #2</span></span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blot</span> &#123;</span><span class="keyword">int</span> a; <span class="keyword">char</span> b[<span class="number">10</span>];&#125;;</span><br><span class="line">blot ink = &#123;<span class="number">25</span>, <span class="string">&quot;spots&quot;</span>&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">recycle</span>(&amp;ink); <span class="comment">// address of a structure</span></span><br></pre></td></tr></table></figure><blockquote><p>recycle(&amp;ink)调用与#1模板匹配，匹配时将Type解释为blot <em>。recycle(&amp;ink)函数调用也与#2模板匹配，这次Type被解释为blot。因此将两个隐式实例——recycle&lt;blot </em>&gt;(blot <em>)和recycle <blot>(blot </em>)发送到可行函数池中。<br>在这两个模板函数中，recycle<blot *>(blot *)被认为是更具体的，因为在生成过程中，它需要进行的转换更少。也就是说，#2模板已经显式指出，函数参数是指向Type的指针，因此可以直接用blot标识Type；而#1模板将Type作为函数参数，因此Type必须被解释为指向blot的指针。也就是说，在#2模板中，Type已经被具体化为指针，因此说它“更具体”。</p></blockquote><p>用于找出最具体的模板的规则被称为函数模板的部分排序规则（partial ordering rules）。和显式实例一样，这也是C++98新增的特性。</p><ol><li>创建自定义选择</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[函数名]&lt;&gt;([实参]);</span><br><span class="line"><span class="comment">// &lt;&gt;指出，编译器应选择模板函数，而不是非模板函数；</span></span><br><span class="line">[函数名]&lt;类型&gt;([实参]);</span><br><span class="line"><span class="comment">// &lt;类型&gt;要求进行显示实例化</span></span><br></pre></td></tr></table></figure><p><strong>关键字decltype（C++11）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(expression) var;<span class="comment">// make var the same type as x;</span></span><br></pre></td></tr></table></figure><p>给decltype提供的参数可以是表达式、标识符。</p><ul><li>如果expression是一个没有用括号括起的标识符，则var的类型与该标识符的类型相同，包括const等限定符。</li><li>如果expression是一个函数调用，则var的类型与函数的返回类型相同。</li><li>如果expression是一个左值，则var为指向其类型的引用。expression是用括号括起的标识符。</li><li>如果前面的条件都不满足，则var的类型与expression的类型相同</li></ul><blockquote><p>注意：<br>给decltype提供的参数是表达式时，并不会调用函数。编译器通过查看函数的原型来获悉返回类型，而无需调用函数。<br>括号并不会改变表达式的值和左值性。</p></blockquote><p><strong>另一种函数声明语法——C++11后置返回类型</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T1, class T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">gt</span><span class="params">(T1 x, T2 y)</span> -&gt; <span class="title">decltype</span><span class="params">(x + y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将返回类型移到了参数声明后面。-&gt;double被称为后置返回类型（trailing return type）。其中auto是一个占位符，表示后置返回类型提供的类型，这是C++11给auto新增的一种角色。这种语法也可用于函数定义.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引用变量：-amp&quot;&gt;&lt;a href=&quot;#引用变量：-amp&quot; class=&quot;headerlink&quot; title=&quot;引用变量：&amp;amp;&quot;&gt;&lt;/a&gt;引用变量：&amp;amp;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;创建引用声明：&lt;/strong&gt;&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="C++" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="高级语言" scheme="http://example.com/tags/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>行列式</title>
    <link href="http://example.com/2022/01/16/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    <id>http://example.com/2022/01/16/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E8%A1%8C%E5%88%97%E5%BC%8F/</id>
    <published>2022-01-16T15:10:31.582Z</published>
    <updated>2022-01-16T15:50:39.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>行列式的几何意义</li><li>全排列</li><li>n阶行列式的定义</li><li>行列式的性质</li><li>行列式的性质</li><li>行列式按行按列展开</li></ul></blockquote><h1 id="行列式的几何意义"><a href="#行列式的几何意义" class="headerlink" title="行列式的几何意义"></a>行列式的几何意义</h1><p><strong>行列式</strong>可以看做是<strong>有向面积或体积</strong>的概念在一般的<strong>欧几里得空间</strong>中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个<strong>线性变换</strong>对“体积”所造成的影响。</p><p><strong>线性变换</strong></p><blockquote><p>线性映射是从一个向量空间V到另一个向量空间W的映射且保持向量的可加性和成比例性，而线性变换是线性空间V到其自身的线性映射。</p><script type="math/tex; mode=display">可加性：L(\vec{v}+\vec{w})=L(\vec{v})+L(\vec{w})\\成比例性：L(c\vec{v})=cL(\vec{v})\\线性变换保持向量加法运算和数乘运算</script><p>微分算子是线性的，即求导具有可加性和成比例性</p></blockquote><p><strong>向量空间</strong></p><blockquote><p>向量空间满足向量加法和数乘规则</p><script type="math/tex; mode=display">\begin{array}&1.\vec{u}+(\vec{v}+\vec{w})=(\vec{u}+\vec{v})+\vec{w}\\2.\vec{v}+\vec{w}=\vec{w}+\vec{v}\\3.向量加法的单位元存在\\ 4.每个向量的加法逆元均存在\\5.a(b\vec{v})=(ab)\vec{v} \\6.向量乘法的单位元存在\\7.a(\vec{v}+\vec{w})=a\vec{v}+a\vec{w} \\8.(a+b)\vec{v}=a\vec{v}+b\vec{v} \\\end{array}</script><p>向量空间亦称线性空间；欧几里得空间是指一类特殊的向量空间，对通常3维空间的向量讨论长度、夹角等几何性质。                                                                                                                                     </p></blockquote><h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><p><strong>定义：</strong>把n个不同的元素排成一列，叫做n个元素的全排列。简称排列</p><p><strong>逆序数的定义：</strong>对于n个不同不同的元素，先规定各元素之间有一个标准次序，于是在这n个元素的任一排列中，当某一对元素的先后次序与标准次序不同时，就构成了一个逆序。一个排列中所有逆序的总数叫做这个排列的<strong>逆序数</strong>。</p><p>逆序数为奇数的排列叫做奇排列，逆序数为偶数的排列叫做偶排列。</p><blockquote><p>计算逆序数的方法：</p></blockquote><h1 id="n阶行列式的定义"><a href="#n阶行列式的定义" class="headerlink" title="n阶行列式的定义"></a>n阶行列式的定义</h1><p><strong>定义：</strong>设有n^2^个数，排成n行n列的数表</p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & a_{12} & ... & a_{1n} \\a_{21} & a_{22} & ... & a_{2n} \\...    &   ...  & ... & ...       \\a_{n1} & a_{n2} & ... & a_{nn} \\\end{bmatrix}</script><p>做出表中位于不同行不同列的n个数的乘积，并冠以符号(-1)^t^，得到形如<script type="math/tex">(-1)^{t}a_{1p_{1}}a_{2p_{2}}a_{3p_{3}}...a_{np_{n}}.(1)</script>其中p1,p2,p3…p n为自然数1,2,3,4…n的一个排列，t为这个排列的逆序数。将所有形如(1)式的所有项(n!项)的代数和<script type="math/tex">\sum(-1)^{t}a_{1p_{1}}a_{2p_{2}}a_{3p_{3}}...a_{np_{n}}</script>称为n阶行列式。</p><script type="math/tex; mode=display">D=\begin{bmatrix}a_{11} & a_{12} & ... & a_{1n} \\a_{21} & a_{22} & ... & a_{2n} \\...    &   ...  & ... & ...       \\a_{n1} & a_{n2} & ... & a_{nn} \\\end{bmatrix}</script><p>简称<script type="math/tex">det(a_{ij})</script>，其中<script type="math/tex">a_{ij}</script>为行列式D的(i , j)元。</p><blockquote><p>上三角行列式</p><p>对角行列式</p></blockquote><h1 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h1><p><strong>性质1：行列式与它的转置行列相等。</strong></p><p><strong>性质2：对换行列式的两行（列），行列式变号。</strong></p><blockquote><p>推论：如果行列式有两行（列）完全相同，则此行列式等于0。</p></blockquote><p><strong>性质3：行列式的某一行（列）中所有元素都乘同一个数K，等于用数K乘此行列式。</strong></p><blockquote><p>推论: 行列式中某一行（列）中的所有元素的公因子可以提到行列式记号的外面。</p></blockquote><p><strong>性质4：行列式中如果有两行（列）的元素成比例，则此行列式等于0。</strong></p><p><strong>性质5：若行列式的某一行（列）的元素都是两数之和，则D等于这两个行列式之和。</strong></p><p><strong>性质6：把行列式的某一行（列）的各个元素乘同一个数然后加到另一行（列）对应元素上，行列式不变。</strong>     </p><h1 id="行列式按行按列展开"><a href="#行列式按行按列展开" class="headerlink" title="行列式按行按列展开"></a>行列式按行按列展开</h1><p>在n阶行列式中，把(i,j)元a~ij~所在的第i行第j列划去后，留下的n-1阶行列式叫做(i,j)元a~ij~的余子式，记作<script type="math/tex">M_{ij}</script>；记<script type="math/tex">A_{ij}=(-1)^{i+j}M_{ij}</script>为代数余子式。</p><p><strong>引理 一个n阶行列式，如果其中第i行所有元素除(i,j)元a~ij~外都是0，那么这行列式等于aij与它的代数余子式的乘积。</strong></p><p><strong>定理2：行列式等于它的任一行（列）的各元素与对应的代数余子式成绩之和。</strong></p><blockquote><p>推论：行列式某一行（列）的元素与另一行（列）的对应元素的代数余子式乘积之和等于0。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;行列式的几何意义&lt;/li&gt;
&lt;li&gt;全排列&lt;/li&gt;
&lt;li&gt;n阶行列式的定义&lt;/li&gt;
&lt;li&gt;行列式的性质&lt;/li&gt;
&lt;li&gt;行列式的性质&lt;/li&gt;
&lt;li&gt;行列式按行按列展开&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h</summary>
      
    
    
    
    <category term="线性代数" scheme="http://example.com/categories/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    
    <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>矩阵</title>
    <link href="http://example.com/2022/01/16/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%9F%A9%E9%98%B5/"/>
    <id>http://example.com/2022/01/16/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/%E7%9F%A9%E9%98%B5/</id>
    <published>2022-01-16T15:10:31.580Z</published>
    <updated>2022-01-16T15:54:35.077Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>线性方程组和矩阵</li><li>矩阵的运算</li><li>逆矩阵</li><li>克拉默法则</li><li>矩阵分块法</li></ul></blockquote><h1 id="线性方程组和矩阵"><a href="#线性方程组和矩阵" class="headerlink" title="线性方程组和矩阵"></a>线性方程组和矩阵</h1><h2 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h2><h2 id="矩阵的定义"><a href="#矩阵的定义" class="headerlink" title="矩阵的定义"></a>矩阵的定义</h2><p><strong>定义1：有mxn个数aij(i=1,2,…,m;j=1,2,…,n)排成的m行n列的数表，称为m行n列的矩阵，简称mxn矩阵。</strong></p><blockquote><blockquote><p>实矩阵：元素为实数。</p><p>复矩阵：元素为复数。</p><p>n阶方阵\n阶矩阵：行数与列数都等于n。</p><p>对角阵（对角矩阵）：从左上角到右下角的直线（叫做对角线）以外的元素全为0的方阵。</p><p>两个矩阵行数、列数都相同时，就称它们是同型矩阵。</p></blockquote></blockquote><h1 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h1><h2 id="矩阵的加法"><a href="#矩阵的加法" class="headerlink" title="矩阵的加法"></a>矩阵的加法</h2><p><strong>定义2：设有两个mxn矩阵A=(<script type="math/tex">a_{ij}</script>)和B=(<script type="math/tex">b_{ij}</script>)，那么矩阵A与B的和记作A+B。 </strong></p><blockquote><p>对应位上的元素相加。</p><p>只有两个矩阵为同型矩阵时才能进行加法运算。</p><ul><li>A+B=B+A</li><li>(A+B)+C=A+(B+C)</li><li>A+(-A)=0</li></ul></blockquote><h2 id="矩阵的数乘运算"><a href="#矩阵的数乘运算" class="headerlink" title="矩阵的数乘运算"></a>矩阵的数乘运算</h2><p><strong>定义3：数λ与矩阵A的乘积记作λA或Aλ。</strong></p><blockquote><ul><li>(λξ)A=λ(ξA)</li><li>(λ+ξ)A=λA+ξA</li><li>λ(A+B)=λA+λB</li></ul></blockquote><h2 id="矩阵与矩阵的乘法"><a href="#矩阵与矩阵的乘法" class="headerlink" title="矩阵与矩阵的乘法"></a>矩阵与矩阵的乘法</h2><p><strong>定义4：设A=(<script type="math/tex">a_{ij}</script>)是一个mxs的矩阵，B=(<script type="math/tex">b_{ij}</script>)是一个sxn的矩阵,那么规定矩阵A与矩阵B的乘积是一个mxn矩阵C=(<script type="math/tex">c_{ij}</script>) 。</strong></p><blockquote><ul><li>(AB)C=A(BC)</li><li>λ(AB)=(λA)B</li><li>A(B+C)=AB+AC</li></ul></blockquote><p><strong>矩阵相乘的几何意义：两个线性变换的相继作用。</strong></p><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p><strong>定义5：把矩阵A的行列式换成同序数的列得到一个新矩阵，叫做A的转置矩阵，记作A^T^</strong></p><blockquote><ul><li>(A^T^)^T^=A</li><li>(A+B)^T^=A^T^+B^T^</li><li>(λA)^T^=λA^T^</li><li>(AB)^T^=B^T^A^T^</li></ul><p>如果$$A^T^=A，那么A称为对称矩阵，简称对称阵。</p></blockquote><h2 id="方阵的行列式"><a href="#方阵的行列式" class="headerlink" title="方阵的行列式"></a>方阵的行列式</h2><p><strong>定义6：由n阶矩阵A的元素所构成的行列式（各元素的位置不变），称为方阵A的行列式，记作detA或|A|。</strong></p><blockquote><ul><li>|A^T^|=|A|</li><li>|λA|=λ^n^|A|</li><li>|AB|=|A||B|</li><li>|AB|=|BA|</li></ul></blockquote><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><p>定义：行列式|A|的各个元素的代数余子式A~ij~所构成的如下矩阵，称为矩阵A的伴随矩阵，简称伴随阵。</p><p><strong>AA^<em>^=A^</em>^A=|A|E</strong></p><h1 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h1><h2 id="逆矩阵的定义、性质和求法"><a href="#逆矩阵的定义、性质和求法" class="headerlink" title="逆矩阵的定义、性质和求法"></a>逆矩阵的定义、性质和求法</h2><p><strong>定义7：对于n阶矩阵A，如果有一个n阶矩阵B，使AB=BA=E，则说矩阵A是可逆的，并把B称为A的逆矩阵，简称逆阵。</strong>(B^-1^AB=A)</p><p>如果A是可逆的，那么A的逆矩阵是唯一的。</p><p>定理1：若矩阵A可逆，则|A|$\neq$0.</p><p>定理2：若|A|$\neq$0,则矩阵A可逆，且$A^{-1}=\frac{1}{|A|}A^{*}$ </p><p>当|A|为0时，称A为奇异矩阵，|A|不为0时，称A为非奇异矩阵。矩阵A可逆的充要条件为|A|$\neq$0，即可逆矩阵为非奇异矩阵。</p><blockquote><p>推论：若AB=E或（BA=E），则B=A^-1^.</p><p><strong>逆矩阵的运算规律：A,B可逆</strong></p><script type="math/tex; mode=display">\begin{array}&(A^{-1})^{-1}=A\\(λA)^{-1}=\frac{1}{λ}A^{-1}\\(AB)^{-1}=B^{-1}A^{-1}\end{array}</script></blockquote><h1 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h1><p><strong>如果线性方程组的系数矩阵的行列式不为0，那么方程组有唯一解</strong></p><blockquote><p>AX=B</p><p>系数矩阵A行列式为0时，线性变换后将向量空间压缩到一维，方程组有无穷多解或无解；</p><p>系数矩阵A行列式不为0，线性变换后向量空间维度不变，方程组有唯一解</p></blockquote><h1 id="矩阵分块法"><a href="#矩阵分块法" class="headerlink" title="矩阵分块法"></a>矩阵分块法</h1><hr><h1 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h1><p><strong>定义1 矩阵的初等行变换</strong></p><blockquote><ul><li>对换两行</li><li>以数K$\neq$0乘某一行中的所有元</li><li>把某一行所有元的k倍加到另一行对应的元上去</li></ul><p>矩阵之间的等价关系具有以下性质</p><ul><li>反身性    A~A</li><li>对称性   若A~B,则 B~A</li><li>传递性   若A~B, B~C, 则A~C</li></ul><p>行最简形矩阵：行阶梯形矩阵非零行的第一个非零元为1，阶梯口元素所在其他元素为0.</p><p>标准形矩阵：左上角是单位阵，其它元素皆为0。</p><p>矩阵初等行变换的应用：</p><script type="math/tex; mode=display">\begin{array}&1.(A|E)\Rightarrow(E,A^{-1})   \\ 2.若AX=B,求X:(A|B)\Rightarrow(E|A^{-1}B)         \\3.求A^{-1}B：(A|B)\Rightarrow(E|A^{-1}B) \\4.求R(A)\end{array}</script></blockquote><p><strong>定义2：（1）非零矩阵若满足（i）非零行在零行上面；（ii）非零行的首非零元所在列在上一行（如果存在的话）的首非零元所在列的右边，则称此矩阵为行阶梯形矩阵；（2）若A是行阶梯形矩阵，并且还满足：（i）非零行的首非零元为1；（ii）首非零元所在的列其他元均为0，则称A为行最简形矩阵。</strong></p><p><strong>定理1：设A与B为mxn矩阵，那么</strong></p><p><strong>（i）（r）A~B的充分必要条件是存在m阶可逆矩阵P，使PA=B;</strong></p><p><strong>（ii）（c）A~B的充分必要条件是存在n阶可逆矩阵Q，使AQ=B</strong></p><p><strong>（iii）A~B的充分必要条件是存在m阶可逆矩阵P及可逆矩阵Q，使PAQ=B</strong></p><p><strong>定义3：由单位矩阵E经过一次初等行变换得到的矩阵称为初等矩阵。</strong></p><p><strong>性质1：设A是一个mxn矩阵，对A实施一次初等行变换，相当于在A的左边乘相应的m阶初等矩阵；对A施行一次初等列变换，相当于在A的右边乘相应的n阶初等矩阵。</strong></p><p><strong>性质2：方阵A可逆的充分必要条件是存在有限个初等矩阵P1,P2,P3,…Pn,使A=P1P2P3…Pn</strong></p><blockquote><p>n阶可逆矩阵的行最简形矩阵是n阶方阵。</p><p>推论：方阵A可逆的充分必要条件是A~rE</p></blockquote><h1 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h1><p><strong>定义4：在mxn矩阵A中，任取k行k列</strong>($k \leq m, k\leq n$) <strong>,位于这些交叉处的k^2^个元素，不改变它们在A中所处的位置次序而得到的k阶行列式，称为矩阵A的k阶子式。</strong>  </p><p><strong>引理：设A~rB，则A与B中的非零子式的最高阶数相等。</strong></p><p><strong>定义5：设在矩阵A中有一个不等于0的r阶子式D，且所有r+1阶子式（如果存在的话）全等于0，那么D称为矩阵A的最高阶子式，数r称为矩阵A的秩，记作R（A）。并规定零矩阵的秩为0.</strong></p><blockquote><p>可逆矩阵又称满秩矩阵，不可逆矩阵（奇异矩阵）又称降秩矩阵。</p></blockquote><p><strong>定理2：若A~B，则R(A)=R(B). </strong></p><blockquote><p>推论：若可逆矩阵P、Q使PAQ=B，则R(A)=R(B).</p></blockquote><p>矩阵的秩的性质：</p><script type="math/tex; mode=display">\begin{array}&1.\leq R(A_{mxn})\leq min\{ m, n\} \\2.R(A^{T})=R(A)\\3.若A \backsim B，则R(A)=R(B).\\4.若P，Q可逆，则R(PAQ)=R(A)\\5.max\{R(A),R(B)\}\leq R(A,B) \leq R(A)+R(B)\\特别地，当B=b，    R(A)\leq R(A,b)\leq R(A)+1\\6.R(A+B)\leq R(A)+R(B)\\7.R(AB)\leq min\{R(A),R(B)\}\\8.若A_{mxn}B_{nxl}=0,则R(A)+R(B)\leq n\end{array}</script><blockquote><p>列满秩矩阵：矩阵的秩等于等于它的列数。</p><p>行满秩矩阵：矩阵的秩等于它的行数。</p></blockquote><p><strong>秩的几何意义：秩即线性变换后空间的维度，是列空间的维数</strong></p><h1 id="线性方程组的解"><a href="#线性方程组的解" class="headerlink" title="线性方程组的解"></a>线性方程组的解</h1><p><strong>定理3：n元线性方程组Ax=b</strong></p><ol><li>无解的充分必要条件是R(A)&lt;R(A,b)</li><li>有唯一解的充分必要条件是R(A)=R(A,b)=n(维度不变)</li><li>有无限多解的充分必要条件是R(A)=R(A,b)&lt;n</li></ol><blockquote><script type="math/tex; mode=display">\begin{array}&1.|A|\neq 0 \Rightarrow R(A)=n\Rightarrow R(A,b)=n\Rightarrow Ax=b有解  \\2.|A|=0\Rightarrow R(A)<n\Rightarrow Ax=b无解or无穷多解\end{array}</script></blockquote><p><strong>定理4：n元齐次方程组Ax=0有非零解的充分必要条件是R(A)&lt;n;</strong></p><p><strong>定理5：线性方程组Ax=b有解的充分必要条件是R(A)=R(A,b) </strong></p><p><strong>定理6：矩阵方程AX=B有解的充分必要条件是R(A)=R(A,B) </strong></p><p>定理7：设AB=C，则$R(C)\leq min\{R(A),R(B) \}$ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;线性方程组和矩阵&lt;/li&gt;
&lt;li&gt;矩阵的运算&lt;/li&gt;
&lt;li&gt;逆矩阵&lt;/li&gt;
&lt;li&gt;克拉默法则&lt;/li&gt;
&lt;li&gt;矩阵分块法&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;线性方程组和矩阵&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="线性代数" scheme="http://example.com/categories/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    
    <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
</feed>
